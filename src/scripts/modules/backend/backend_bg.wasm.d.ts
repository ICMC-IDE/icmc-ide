/* tslint:disable */
/* eslint-disable */
export function __wbg_emulator_free(a: number): void;
export function emulator_new(): number;
export function emulator_load(a: number, b: number, c: number): void;
export function emulator_reset(a: number): void;
export function emulator_state(a: number): number;
export function emulator_store(a: number, b: number, c: number): void;
export function emulator_tick(a: number, b: number): number;
export function emulator_registers(a: number): number;
export function emulator_rom(a: number): number;
export function emulator_ram(a: number): number;
export function emulator_vram(a: number): number;
export function compiler_compile(a: number, b: number, c: number, d: number): void;
export function __wbg_compiler_free(a: number): void;
export function __wbg_assembly_free(a: number): void;
export function assembler_assemble(a: number, b: number, c: number, d: number): void;
export function assembly_symbols(a: number, b: number): void;
export function assembly_binary(a: number, b: number): void;
export function assembly_mif(a: number, b: number): void;
export function __wbg_assembler_free(a: number): void;
export function __wbg_fs_free(a: number): void;
export function fs_new(): number;
export function fs_writeFile(a: number, b: number, c: number, d: number, e: number): void;
export function fs_readFile(a: number, b: number, c: number, d: number): void;
export function wasm_assemble(a: number, b: number): number;
export function wasm_get_version(): number;
export function wasm_string_new(a: number): number;
export function wasm_string_drop(a: number): void;
export function wasm_string_get_len(a: number): number;
export function wasm_string_get_byte(a: number, b: number): number;
export function wasm_string_set_byte(a: number, b: number, c: number): void;
export const memory: WebAssembly.Memory;
export const __wbindgen_export_1: WebAssembly.Table;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __externref_table_dealloc(a: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
